stages:
  - verify
  - build
  - deploy

lint:
  image: golangci/golangci-lint:latest-alpine
  stage: verify
  before_script:
    - apk add git
    - go get -d
  script: golangci-lint run . -D errcheck
  only:
    - merge_requests
  except:
    - schedules

lint:on-schedule:
  image: golangci/golangci-lint:latest-alpine
  stage: verify
  before_script:
    - apk add git
    - go get -d
  script: golangci-lint run . -D errcheck
  only:
    - master
    - schedules

build:
  image: golang:alpine
  stage: build
  before_script:
    - apk add git
    - export GOPATH=$CI_PROJECT_DIR
    - go get -d
  script: go build api.go
  cache:
    paths:
      - src/
  artifacts:
    paths:
      - api
  except:
    - schedules

deploy_review:
  image: golang:alpine
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apk add openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod -R 700 ~/.ssh
    - ssh-add ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} mkdir -p /var/www/${CI_COMMIT_REF_NAME}/
    - scp api ${DEPLOY_USER}@${DEPLOY_HOST}:/var/www/${CI_COMMIT_REF_NAME}/
  after_script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} ls -la /var/www/
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://review.example.com
    on_stop: stop_review
  only:
    - branches
  except:
    - master
    - schedules

deploy_prod:
  image: golang:alpine
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apk add openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod -R 700 ~/.ssh
    - ssh-add ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} rm -rf /var/www/*
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} mkdir -p /var/www/${CI_COMMIT_REF_NAME}/
    - scp api ${DEPLOY_USER}@${DEPLOY_HOST}:/var/www/${CI_COMMIT_REF_NAME}/
  after_script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} ls -la /var/www/
  environment:
    name: production
    url: https://prod.example.com
  when: manual
  only:
    - master
  except:
    - schedules

stop_review:
  image: golang:alpine
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script:
    - 'which ssh-agent || ( apk add openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod -R 700 ~/.ssh
    - ssh-add ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} rm -rf /var/www/${CI_COMMIT_REF_NAME}/
  after_script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} ls -la /var/www/
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
    - schedules